from quantopian.pipeline import Pipeline
from quantopian.research import run_pipeline
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.factors import SimpleMovingAverage
from quantopian.pipeline.data.factset.estimates import Actuals
from quantopian.pipeline.data.factset.estimates import PeriodicConsensus
from quantopian.pipeline.data import Fundamentals
from quantopian.pipeline.filters.fundamentals import IsPrimaryShare

# Filter for primary share equities. IsPrimaryShare is a built-in filter.
primary_share = IsPrimaryShare()

# Equities listed as common stock (as opposed to, say, preferred stock).
# 'ST00000001' indicates common stock
common_stock = Fundamentals.security_type.latest.eq('ST00000001')

# Non-depositary receipts. Recall that the ~ operator inverts filters,
# turning Trues into Falses and vice versa
not_depositary = ~Fundamentals.is_depositary_receipt.latest

# Equities not trading over-the-counter.
not_otc = ~Fundamentals.exchange_id.latest.startswith('OTC')

# Not when-issued equities.
not_wi = ~Fundamentals.symbol.latest.endswith('.WI')

# Equities without LP in their name, .matches does a match using a regular
# expression
not_lp_name = ~Fundamentals.standard_name.latest.matches('.* L[. ]?P.?$')

# Equities whose most recent Morningstar market cap is not null have
# fundamental data and therefore are not ETFs.
have_market_cap = Fundamentals.market_cap.latest.notnull()

fq0_eps_act = Actuals.slice('EPS', 'qf', 0)
fq0_eps_estimate=PeriodicConsensus.slice(item='EPS', freq='qf', period_offset=1)
def make_pipeline():
    fq0_eps_act_actual_value = fq0_eps_act.actual_value.latest
    fq0_eps_act_publication_date = fq0_eps_act.publication_date.latest
    fq0_eps_act_asof_date = fq0_eps_act.asof_date.latest
    fq0_eps_act_currency = fq0_eps_act.currency.latest
    fq0_eps_estiamte_actual_value = fq0_eps_estimate.mean.latest
    Surprise = (fq0_eps_estiamte_actual_value-fq0_eps_act_actual_value)
    NaN_securities_removal = (Surprise.notnull())
    Securities_outperfoming_estimates = (Surprise > 0)
    
    isTradable = NaN_securities_removal & Securities_outperfoming_estimates & primary_share & common_stock & not_depositary & not_otc & not_wi & not_lp_name & have_market_cap
    
    return Pipeline(
            columns={
        'Result': Surprise,
        'Result_date': fq0_eps_act_asof_date,
        'currency': fq0_eps_act_currency
        },
            screen=isTradable)

my_pipe = make_pipeline()
latest_close = USEquityPricing.close.latest
result = run_pipeline(my_pipe, '2015-05-05', '2015-05-05')
result.head()
